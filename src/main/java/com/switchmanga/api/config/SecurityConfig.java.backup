// src/main/java/com/switchmanga/api/security/SecurityConfig.java

package com.switchmanga.api.config;

import lombok.RequiredArgsConstructor;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration;
import org.springframework.security.config.annotation.method.configuration.EnableMethodSecurity;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;

/**
 * Spring Security 설정
 * JWT 기반 인증 및 권한 관리
 */
@Configuration
@EnableWebSecurity
@EnableMethodSecurity
@RequiredArgsConstructor
public class SecurityConfig {

    private final JwtAuthenticationFilter jwtAuthenticationFilter;

    /**
     * Security Filter Chain 설정
     */
    @Bean
    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {
        http
                // CSRF 비활성화 (JWT 사용하므로)
                .csrf(csrf -> csrf.disable())

                // Session 비활성화 (Stateless)
                .sessionManagement(session ->
                        session.sessionCreationPolicy(SessionCreationPolicy.STATELESS)
                )

                // 경로별 인증 설정
                .authorizeHttpRequests(auth -> auth
                        // ========================================
                        // 1. Public API (인증 불필요)
                        // ========================================
                        .requestMatchers("/error").permitAll()
                        .requestMatchers("/api/v1/auth/**").permitAll()

                        // Publisher Public API
                        .requestMatchers("/api/v1/publishers").permitAll()
                        .requestMatchers("/api/v1/publishers/{id}").permitAll()

                        // Series Public API
                        .requestMatchers("/api/v1/series").permitAll()
                        .requestMatchers("/api/v1/series/{id}").permitAll()
                        .requestMatchers("/api/v1/series/{id}/volumes").permitAll()

                        // Volume Public API
                        .requestMatchers("/api/v1/volumes").permitAll()
                        .requestMatchers("/api/v1/volumes/{id}").permitAll()

                        // ========================================
                        // 2. Publisher Portal API (인증 필요)
                        // ========================================
                        .requestMatchers("/api/v1/publishers/me/**").authenticated()

                        // ========================================
                        // 3. Admin API (인증 필요)
                        // ========================================
                        .requestMatchers("/api/v1/publishers/admin/**").authenticated()
                        .requestMatchers("/api/v1/admin/**").authenticated()

                        // ========================================
                        // 4. 나머지 모든 요청 (인증 필요)
                        // ========================================
                        .anyRequest().authenticated()
                )

                // JWT 인증 필터 추가
                .addFilterBefore(jwtAuthenticationFilter, UsernamePasswordAuthenticationFilter.class);

        return http.build();
    }

    /**
     * Password Encoder (BCrypt)
     */
    @Bean
    public PasswordEncoder passwordEncoder() {
        return new BCryptPasswordEncoder();
    }

    /**
     * Authentication Manager
     */
    @Bean
    public AuthenticationManager authenticationManager(
            AuthenticationConfiguration authenticationConfiguration
    ) throws Exception {
        return authenticationConfiguration.getAuthenticationManager();
    }
}
